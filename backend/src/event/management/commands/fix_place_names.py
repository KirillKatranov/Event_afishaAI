from django.core.management.base import BaseCommand
from django.db import transaction
from event.models import Content


class Command(BaseCommand):
    help = "–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç (Content —Å —Ç–µ–≥–∞–º–∏ places), –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
        )
        parser.add_argument(
            "--force",
            action="store_true",
            help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        )

    def handle(self, *args, **options):
        dry_run = options["dry_run"]
        force = options["force"]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ (Content —Å —Ç–µ–≥–∞–º–∏ –∏–∑ –º–∞–∫—Ä–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'places')
        places = Content.objects.filter(tags__macro_category__name="places").distinct()

        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–º–∏—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
        places_to_fix = []
        for place in places:
            if place.name and place.name[0].islower():
                places_to_fix.append(place)

        if not places_to_fix:
            self.stdout.write(
                self.style.SUCCESS(
                    "‚úÖ –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç —É–∂–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã!"
                )
            )
            return

        self.stdout.write(
            self.style.WARNING(
                f"üîç –ù–∞–π–¥–µ–Ω–æ {len(places_to_fix)} –º–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–º–∏—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã:"
            )
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for place in places_to_fix:
            old_name = place.name
            new_name = place.name.capitalize()
            self.stdout.write(f'  üìç ID {place.id}: "{old_name}" ‚Üí "{new_name}"')

        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    "üîß –≠—Ç–æ –±—ã–ª dry-run. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run"
                )
            )
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if not force:
            confirm = input(
                f"\n‚ùì –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è {len(places_to_fix)} –º–µ—Å—Ç? (y/N): "
            )
            if confirm.lower() != "y":
                self.stdout.write(self.style.ERROR("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"))
                return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updated_count = 0
        with transaction.atomic():
            for place in places_to_fix:
                old_name = place.name
                place.name = place.name.capitalize()
                place.save()
                updated_count += 1
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ID {place.id} "{old_name}" ‚Üí "{place.name}"'
                    )
                )

        self.stdout.write(
            self.style.SUCCESS(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—Ç!")
        )
